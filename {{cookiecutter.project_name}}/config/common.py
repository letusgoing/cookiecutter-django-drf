"""
Django settings for {{cookiecutter.app_name}} project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
from pathlib import Path
import os
import datetime


{% if cookiecutter.use_ldap -%}
from django_auth_ldap.config import LDAPSearch
import ldap
{%- endif %}


# Build paths inside the project like this: ROOT_DIR / 'subdir'.
ROOT_DIR = Path(__file__).resolve().parent.parent

print("ROOT_DIR IS ", ROOT_DIR)
LOGS_DIR = os.path.join(ROOT_DIR, 'logs')

try:
    os.makedirs(LOGS_DIR)
except:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2)!ocidlp$0+q$(p$aze%@gj^y)_7^2jckd-0_8&c^xfkkk^g!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition


DJANGO_APPS = [
{% if cookiecutter.use_simpleui == "yes" -%}
    'simpleui',
{%- endif %}


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework'
]

LOCAL_APPS = [
{% if cookiecutter.use_custom_user_model == "yes" -%}
    'users',
{%- endif %}
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{cookiecutter.app_name}}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{cookiecutter.app_name}}.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
{% if cookiecutter.db_choice == "mysql" -%}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '{{cookiecutter.dbname}}',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': '',
        'TIME_ZONE': 'Asia/Shanghai',
        'ATOMIC_REQUESTS': True,
        'CONN_MAX_AGE': 60,
    }
}
{%- endif %}
{% if cookiecutter.db_choice == "sqlite3" -%}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',

    }
}
{%- endif %}

{% if cookiecutter.db_choice == "postgresql" -%}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '{{cookiecutter.dbname}}',
        'USER': 'postgres',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}
{%- endif %}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(ROOT_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        'verbose': {
            'datefmt': '%Y-%m-%dT%H:%M:%S',
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'main': {
            'datefmt': '%Y-%m-%dT%H:%M:%S',
            'format': '[%(asctime)s.%(msecs)d] [%(module)s] [%(lineno)d] [%(levelname)s] [%(name)s] [%(processName)s] [%(threadName)s]  %(message)s',
            'style': '%',
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "main",
        },
        'time_file': {
            'encoding': 'utf8',
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            # 'maxBytes': 1024 * 1024 * 100,  # 100M
            'when': 'd',  # 按什么时间切割，s：秒，m：分，h：小时，d：天
            'backupCount': 30,
            'formatter': 'main',
            'filename': os.path.join(LOGS_DIR, '{{cookiecutter.project_name}}.log'),
        },
    },
    'loggers': {
        # loggin.getLogger(__name__)没有匹配到对应的logger时，将使用下面这个名称为空的logger
        '': {
            'handlers': ['console', 'time_file'],
            'propagate': False,
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console', 'time_file'],
            'propagate': False,
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['console', 'time_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'time_file'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [  # 解析request.data
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
    ]
}


{% if cookiecutter.cache_choice == "redis" -%}
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://@127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 100
            }
        }
    }
}
{%- endif %}


{% if cookiecutter.use_custom_user_model == "yes" -%}
AUTH_USER_MODEL = "users.User"
{%- endif %}

JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_handler',
    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_handler',
    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_payload_handler',
    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_response_payload_handler',
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600 * 24),  # token失效时间
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,
    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    # 'JWT_AUTH_COOKIE': "",
}



# 用户默认过期时间延迟配置，用户创建时间之后的EXPIRE_YEAR年、EXPIRE_MONTH月、EXPIRE_DAY天后过期
EXPIRE_YEAR = 1
EXPIRE_MONTH = 0
EXPIRE_DAY = 0

APPEND_SLASH = False



AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",

]


{% if cookiecutter.use_ldap -%}
# ldap配置
AUTH_LDAP_SERVER_URI = "ldap://localhost:389"
AUTH_LDAP_BIND_DN = ""
AUTH_LDAP_BIND_PASSWORD = ""
AUTH_LDAP_SEARCH_OU = ""
AUTH_LDAP_SEARCH_FILTER = ""
AUTH_LDAP_USER_ATTR_MAP = {"username": "uid",
                           "realname": "displayName",
                           "nickname": "displayName",
                           "email": "mail",
                           "phone": "mobile"}
AUTH_LDAP_USER_SEARCH = LDAPSearch(base_dn=AUTH_LDAP_SEARCH_OU, scope=ldap.SCOPE_SUBTREE,
                                   filterstr=AUTH_LDAP_SEARCH_FILTER)
{%- endif %}


{% if cookiecutter.use_simpleui -%}
SIMPLEUI_CONFIG = {

}
# 关闭simpleui推送
SIMPLEUI_ANALYSIS = False
{%- endif %}
